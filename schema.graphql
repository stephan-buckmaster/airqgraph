schema {
    query: Query
    mutation: Mutation
}

type AirVisualConcentration {
    conc: Float
    aqius: Float
    aqicn: Float
}

input AirVisualConcentrationInput {
    conc: Float
    aqius: Float
    aqicn: Float
}
type AirVisualDeviceMeasurement {
    id: ID!
    co2: Float
    pm25: AirVisualConcentration!
    pm10:  AirVisualConcentration!
    pm1:  AirVisualConcentration!
    pr: Float
    hm: Float
    tp: Float
    aqius: Float
    aqicn: Float
    mainus: String
    maincn: String
    ts: String
    created_at: String!
}

input AirVisualDeviceMeasurementInput {
    pm25: AirVisualConcentrationInput
    pm10:  AirVisualConcentrationInput
    pm1:  AirVisualConcentrationInput
    co2: Float
    pr: Float
    hm: Float
    tp: Float
    aqius: Float
    aqicn: Float
    mainus: String
    maincn: String
    ts: String
}

type AirVisualDeviceMeasurementResult {
    success: Boolean!
    errors: [String]
    air_visual_device_measurement: AirVisualDeviceMeasurement
}

type AirVisualDeviceMeasurementsResult {
    success: Boolean!
    errors: [String]
    air_visual_device_measurements: [AirVisualDeviceMeasurement]
}

type Query {
    listAirVisualDeviceMeasurements: AirVisualDeviceMeasurementsResult!
    getLatestAirVisualDeviceMeasurement: AirVisualDeviceMeasurementResult!
    getAirVisualDeviceMeasurement(id: ID!): AirVisualDeviceMeasurementResult!
}

type Mutation {
    createAirVisualDeviceMeasurement(input: AirVisualDeviceMeasurementInput): AirVisualDeviceMeasurementResult!
}
